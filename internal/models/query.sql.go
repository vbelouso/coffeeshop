// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package models

import (
	"context"
)

const getCustomer = `-- name: GetCustomer :one
SELECT customer_id, full_name, created_at FROM customers
WHERE customer_id = $1 LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, customerID int64) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, customerID)
	var i Customer
	err := row.Scan(&i.CustomerID, &i.FullName, &i.CreatedAt)
	return i, err
}

const getOrder = `-- name: GetOrder :one
SELECT order_id, customer_id, status, created_at FROM orders
WHERE order_id = $1 LIMIT 1
`

func (q *Queries) GetOrderByID(ctx context.Context, orderID int64) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, orderID)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.CustomerID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT customer_id, full_name, created_at FROM customers
ORDER BY customer_id
`

func (q *Queries) ListCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(&i.CustomerID, &i.FullName, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrders = `-- name: ListOrders :many
SELECT order_id, customer_id, status, created_at FROM orders
ORDER BY order_id
`

func (q *Queries) ListOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.OrderID,
			&i.CustomerID,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
